<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marys&#39;Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-04T07:02:50.161Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Marys Ma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript的设计模式（一）———— 多态</title>
    <link href="http://yoursite.com/2017/08/03/javascript-design-pattern1/"/>
    <id>http://yoursite.com/2017/08/03/javascript-design-pattern1/</id>
    <published>2017-08-03T09:28:33.495Z</published>
    <updated>2017-08-04T07:02:50.161Z</updated>
    
    <content type="html"><![CDATA[<p>从事前端有两年的时间了，一直觉得自己只致力于实践而忽视了理论上的知识，所以现在想边看《javascript设计模式与开发实践》这本书的同时边记录下自己的学习与理解。刚开始写自己的博文，嗯。。。不怎么会组织文字。。。还是快点开始正文吧^^</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="What-is-设计模式？"><a href="#What-is-设计模式？" class="headerlink" title="What is 设计模式？"></a>What is 设计模式？</h3><p>设计模式其主要思想就是面向对象编程，即不在乎你是谁（is-A），而在于你可以做什么（Has-A）。就像你不必知道电视机里面有些什么、怎么焊接。。。你只要使用发明者提供给你的按钮或遥控器来使用它，就ok了。</p>

<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>设计模式主要是使用封装、继承、多态、组合等技术实现，而对象多态性的概念是其重要的基本编程思想。</p>

<h4 id="what-is-多态？"><a href="#what-is-多态？" class="headerlink" title="what is 多态？"></a>what is 多态？</h4><p>多态，其根本就是将过程化的条件语句变成对象的多种状态设定。举个栗子：</p>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> showName = <span class="function"><span class="keyword">function</span>(<span class="params">person</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(person <span class="keyword">instanceof</span> person1)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'小明'</span>);</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(person <span class="keyword">instanceof</span> person2)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'小红'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">showName(<span class="keyword">new</span> person1); <span class="comment">//小明</span></div><div class="line">showName(<span class="keyword">new</span> person2); <span class="comment">//小红</span></div></pre></td></tr></table></figure>
<p>从上面的代码可以看到，我们通过if…else if语句判断是哪个人，再打印出他相对应的名字。那么当需要增添其他人的时候，我们就需要修改showName方法，或许你也觉得这没什么，但是当我们还有showAge、showSex等等的方法的时候，每增添多一个人就需要同时修改N多的方法，这样并不利于代码的维护性，也增加了自己的工作量。</p>

<p>那就来看看利用对象多态特性的写法吧</p>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'小明'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'小红'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> showName = <span class="function"><span class="keyword">function</span>(<span class="params">person</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(person.name?person.name: <span class="string">'他没有名字'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">showName(<span class="keyword">new</span> person1); <span class="comment">//小明</span></div><div class="line">showName(<span class="keyword">new</span> person2); <span class="comment">//小红</span></div></pre></td></tr></table></figure>
<p>上面的代码中，showName方法根本不用判断你是‘小明’还是‘小红’，它只负责显示对象的‘name’这一个属性，而name就是对象的其中一个状态表示，即使新增N个人，只要他拥有‘name’这个属性他就能显示出来，管理人员的人并不需要知道showName这个方法内部是如何运作。</p>

<h4 id="Ps"><a href="#Ps" class="headerlink" title="Ps"></a>Ps</h4><p>js是一种动态语言，他没有类型检查，这对于利用对象多态特性进行编程来说十分的便利。而静态语言，在实现这种方式编程中不可避免的要经过类型检查这个关卡(本人觉得这是个非常蛋疼的过程)。静态语言实现方式在这里就不多讲了，有兴趣的人可以去看看《javascript设计模式与开发实践》中1.2.3节的介绍…^^</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从事前端有两年的时间了，一直觉得自己只致力于实践而忽视了理论上的知识，所以现在想边看《javascript设计模式与开发实践》这本书的同时边记录下自己的学习与理解。刚开始写自己的博文，嗯。。。不怎么会组织文字。。。还是快点开始正文吧^^&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a
    
    </summary>
    
    
  </entry>
  
</feed>
